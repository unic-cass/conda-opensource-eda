name: Build packages

on:
  workflow_dispatch:
  workflow_call:
    secrets:
      ANACONDA_TOKEN:
        description: 'Anaconda Token'
      ANACONDA_USER:
        description: 'Anaconda User'

env:
  ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
  ANACONDA_USER: ${{ secrets.ANACONDA_USER }}
  DEBIAN_FRONTEND: noninteractive
  GHA_MACHINE_TYPE: "n2-standard-4"
  APT_REQUIREMENTS: binutils build-essential csh curl git libgl1 pkg-config sudo wget

defaults:
  run:
    shell: bash

jobs:
  magic-linux:
    runs-on: 'ubuntu-22.04'
    env:
      PACKAGE: "misc/magic"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt -qqy update &&
          sudo apt -qqy install ${{ env.APT_REQUIREMENTS }} libxrender1
      - uses: ./ci
      - uses: actions/cache/save@v4
        id: cache-magic
        with:
          path: |
            ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/magic-*.conda
          key: ${{ runner.os }}-cache-magic
  netgen-linux:
    runs-on: 'ubuntu-22.04'
    env:
      PACKAGE: "misc/netgen"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt -qqy update &&
          sudo apt -qqy install git wget
      - uses: ./ci
      - uses: actions/cache/save@v4
        id: cache-netgen
        with:
          path: |
            ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/netgen-*.conda
          key: ${{ runner.os }}-cache-netgen
  yosys-linux:
    runs-on: 'ubuntu-22.04'
    env:
      PACKAGE: "syn/yosys"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt -qqy update &&
          sudo apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci
      - uses: actions/cache/save@v4
        id: cache-yosys
        with:
          path: |
            ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/yosys-*.conda
          key: ${{ runner.os }}-cache-yosys
  openroad-linux:
    runs-on: 'ubuntu-22.04'
    env:
      PACKAGE: "pnr/openroad"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt -qqy update &&
          sudo apt -qqy install ${{ env.APT_REQUIREMENTS }} libxml2
      - uses: ./ci
      - uses: actions/cache/save@v4
        id: cache-openroad
        with:
          path: |
            ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/openroad-*.conda
          key: ${{ runner.os }}-cache-openroad
  ngspice-linux:
    runs-on: 'ubuntu-22.04'
    env:
      PACKAGE: "sim/ngspice"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt -qqy update &&
          sudo apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci
      - uses: actions/cache/save@v4
        id: cache-ngspice
        with:
          path: |
            ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/ngspice-*.conda
          key: ${{ runner.os }}-cache-ngspice
  xschem-linux:
    runs-on: 'ubuntu-22.04'
    env:
      PACKAGE: "misc/xschem"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt -qqy update &&
          sudo apt -qqy install ${{ env.APT_REQUIREMENTS }} xorg-dev tcl-dev
      - name: install nodejs for cache
        if: ${{ env.ACT }}
        run: curl -fsSL https://deb.nodesource.com/setup_20.x | bash - && apt -qqy install nodejs
      - uses: ./ci
      - uses: actions/cache/save@v4
        id: cache-xschem
        with:
          path: |
            ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/xschem-*.conda
          key: ${{ runner.os }}-cache-xschem



  # icarus-linux:
  #   runs-on: 'ubuntu-22.04'
  #   env:
  #     PACKAGE: "sim/icarus"
  #     OS_NAME: "linux"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: install nodejs for cache
  #       if: ${{ env.ACT }}
  #       run: curl -fsSL https://deb.nodesource.com/setup_20.x | sudo bash - && sudo apt -qqy install nodejs
  #     - run: sudo apt -qqy update && sudo apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci
  #     - uses: actions/cache/save@v4
  #       id: cache-icarus
  #       with:
  #         path: |
  #           ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/icarus-*.conda
  #         key: ${{ runner.os }}-cache-icarus

  # verilator-linux:
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "sim/verilator"
  #     OS_NAME: "linux"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci

  # yosys-linux-py38:
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "syn/yosys"
  #     OS_NAME: "linux"
  #     PYTHON_VERSION: "3.8"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci

  # verible-linux:
  #   runs-on: "ubuntu-22.04"
  #   env:
  #     PACKAGE: "sv-front/verible"
  #     USE_SYSTEM_GCC_VERSION: "9"
  #     OS_NAME: "linux"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./ci

  # tree-sitter-verilog-linux:
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "misc/tree-sitter-verilog"
  #     OS_NAME: "linux"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci

  # slang-linux:
  #   runs-on: "ubuntu-22.04"
  #   env:
  #     PACKAGE: "sv-front/slang"
  #     OS_NAME: "linux"
  #     USE_SYSTEM_GCC_VERSION: "9"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./ci

  # sv-parser-linux:
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "sv-front/sv-parser"
  #     OS_NAME: "linux"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci

  # moore-linux:
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "sv-front/moore"
  #     OS_NAME: "linux"
  #     SKIP: "true"  # See https://github.com/hdl/conda-eda/issues/163
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci

  # surelog-linux-py38:
  #   needs: ["libunwind", "gperftools"]
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "sv-front/surelog"
  #     OS_NAME: "linux"
  #     PYTHON_VERSION: "3.8"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci

  # surelog-linux-py310:
  #   needs: ["libunwind", "gperftools"]
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "sv-front/surelog"
  #     OS_NAME: "linux"
  #     PYTHON_VERSION: "3.10"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci

  # surelog-uhdm-linux-py38:
  #   needs: ["libunwind", "gperftools"]
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "sv-front/surelog-uhdm"
  #     USE_SYSTEM_GCC_VERSION: "9"
  #     OS_NAME: "linux"
  #     PYTHON_VERSION: "3.8"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} default-jre
  #     - uses: ./ci

  # surelog-uhdm-linux-py310:
  #   needs: ["libunwind", "gperftools"]
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "sv-front/surelog-uhdm"
  #     USE_SYSTEM_GCC_VERSION: "9"
  #     OS_NAME: "linux"
  #     PYTHON_VERSION: "3.10"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} default-jre
  #     - uses: ./ci

  # yosys-uhdm-linux-py38:
  #   needs: ["libunwind", "gperftools"]
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "syn/yosys-uhdm"
  #     OS_NAME: "linux"
  #     PYTHON_VERSION: "3.8"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci

  # yosys-uhdm-linux-py310:
  #   needs: ["libunwind", "gperftools"]
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "syn/yosys-uhdm"
  #     OS_NAME: "linux"
  #     PYTHON_VERSION: "3.10"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci

  # libunwind:
  #   runs-on: 'ubuntu-22.04'
  #   env:
  #     PACKAGE: "misc/libunwind"
  #     OS_NAME: "linux"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: sudo sed -i -e 's/http:/https:/g' /etc/apt/sources.list && sudo apt -o "Acquire::https::Verify-Peer=false" -qqy update && sudo apt -o "Acquire::https::Verify-Peer=false" -qqy reinstall ca-certificates && sudo apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci
  #     - uses: actions/cache/save@v4
  #       id: cache-libunwind
  #       with:
  #         path: |
  #           ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/libunwind-*.conda
  #         key: ${{ runner.os }}-cache-libunwind

  # gperftools:
  #   # needs: ["libunwind"]
  #   runs-on: 'ubuntu-22.04'
  #   env:
  #     PACKAGE: "misc/gperftools"
  #     OS_NAME: "linux"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: sudo sed -i -e 's/http:/https:/g' /etc/apt/sources.list && sudo apt -o "Acquire::https::Verify-Peer=false" -qqy update && sudo apt -o "Acquire::https::Verify-Peer=false" -qqy reinstall ca-certificates && sudo apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci
  #     - uses: actions/cache/save@v4
  #       id: cache-gperftools
  #       with:
  #         path: |
  #           ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/gperftools-*.conda
  #         key: ${{ runner.os }}-cache-gperftools

  # verilator-uhdm-linux-py310:
  #   needs: ["gperftools"]
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "sim/verilator-uhdm"
  #     OS_NAME: "linux"
  #     PYTHON_VERSION: "3.10"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} default-jre
  #     - uses: ./ci

  # zachjs-sv2v-linux:
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "sv-front/zachjs-sv2v"
  #     OS_NAME: "linux"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} libgmp-dev
  #     - uses: ./ci

  open_pdks-sky130a-linux:
    runs-on: 'ubuntu-22.04'
    # needs: magic-linux
    env:
      PACKAGE: "misc/open_pdks/sky130a"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt -qqy update &&
          sudo apt -qqy install ${{ env.APT_REQUIREMENTS }} libxrender1
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: installer-env
          miniconda-version: latest
      - name: restore magic cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/magic-*.conda
          key: ${{ runner.os }}-cache-magic
      - name: create local repository
        run: |
          conda install conda-index
          mkdir -p /tmp/conda-bld/linux-64
          cp ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/magic-*.conda /tmp/conda-bld/linux-64/
          conda index /tmp/conda-bld
          rm -rf ${{ github.workspace }}/workdir
      - uses: ./ci
      - uses: actions/cache/save@v4
        id: cache-sky130a
        with:
          path: |
            ${{ github.workspace }}/workdir/conda-env/conda-bld/noarch/open_pdks.sky130a-*.conda
          key: ${{ runner.os }}-cache-sky130a

  open_pdks-gf180mcuc-linux:
    runs-on: 'ubuntu-22.04'
    # needs: magic-linux
    env:
      PACKAGE: "misc/open_pdks/gf180mcuc"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt -qqy update &&
          sudo apt -qqy install ${{ env.APT_REQUIREMENTS }} libxrender1
      - uses: conda-incubator/setup-miniconda@v2
        with:
          activate-environment: installer-env
          miniconda-version: latest
      - name: restore magic cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/magic-*.conda
          key: ${{ runner.os }}-cache-magic
      - name: create local repository
        run: |
          conda install conda-index
          mkdir -p /tmp/conda-bld/linux-64
          cp ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/magic-*.conda /tmp/conda-bld/linux-64/
          conda index /tmp/conda-bld
          rm -rf ${{ github.workspace }}/workdir
      - uses: ./ci
      - uses: actions/cache/save@v4
        id: cache-gf180mcuc
        with:
          path: |
            ${{ github.workspace }}/workdir/conda-env/conda-bld/noarch/open_pdks.gf180mcuc-*.conda
          key: ${{ runner.os }}-cache-gf180mcuc

  # openlane-linux:
  #   runs-on: 'ubuntu-22.04'
  #   env:
  #     PACKAGE: "misc/openlane"
  #     OS_NAME: "linux"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #         sudo apt -qqy update &&
  #         apt -qqy install ${{ env.APT_REQUIREMENTS }} libxrender1
  #     - uses: ./ci
  #     - uses: actions/cache/save@v4
  #       id: cache-openlane
  #       with:
  #         path: |
  #           ${{ github.workspace }}/workdir/conda-env/conda-bld/noarch/openlane-*.conda
  #         key: ${{ runner.os }}-cache-openlane

  # openlane-linux-py310:
  #   needs: ["magic-linux", "netgen-linux", "openroad-linux-py310", "yosys-linux-py310", "tcllib-linux", "open_pdks-sky130a-linux", "open_pdks-gf180mcuc-linux"]
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "misc/openlane"
  #     OS_NAME: "linux"
  #     PYTHON_VERSION: "3.10"      
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }} libxrender1
  #     - uses: ./ci

  # tcllib-linux:
  #   runs-on: 'ubuntu-22.04'
  #   env:
  #     PACKAGE: "misc/tcllib"
  #     OS_NAME: "linux"
  #     PYTHON_VERSION: "3.10"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: |
  #           sudo apt -qqy update &&
  #           sudo apt -qqy install ${{ env.APT_REQUIREMENTS }} libxrender1
  #     - uses: ./ci
  #     - uses: actions/cache/save@v4
  #       id: cache-tcllib
  #       with:
  #         path: |
  #           ${{ github.workspace }}/workdir/conda-env/conda-bld/noarch/tcllib-*.conda
  #         key: ${{ runner.os }}-cache-tcllib

  # klayout-linux-py38:
  #   runs-on: [self-hosted, Linux, X64]
  #   container: ubuntu:20.04
  #   env:
  #     PACKAGE: "misc/klayout"
  #     OS_NAME: "linux"
  #     PYTHON_VERSION: "3.8"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - run: apt -qqy update && apt -qqy install ${{ env.APT_REQUIREMENTS }}
  #     - uses: ./ci

  klayout-linux:
    runs-on: 'ubuntu-22.04'
    env:
      PACKAGE: "misc/klayout"
      OS_NAME: "linux"
    steps:
      - uses: actions/checkout@v3
      - run: |
          sudo apt -qqy update &&
          sudo apt -qqy install ${{ env.APT_REQUIREMENTS }}
      - uses: ./ci
      - uses: actions/cache/save@v4
        id: cache-klayout
        with:
          path: |
            ${{ github.workspace }}/workdir/conda-env/conda-bld/linux-64/klayout-*.conda
          key: ${{ runner.os }}-cache-klayout

  # klayout-osx:
  #   runs-on: "macos-latest"
  #   env:
  #     PACKAGE: "misc/klayout"
  #     OS_NAME: "osx"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./ci

  # magic-osx:
  #   runs-on: "macos-latest"
  #   env:
  #     PACKAGE: "misc/magic"
  #     OS_NAME: "osx"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./ci

  # netgen-osx:
  #   runs-on: "macos-latest"
  #   env:
  #     PACKAGE: "misc/netgen"
  #     OS_NAME: "osx"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./ci

  # openroad-osx:
  #   runs-on: "macos-latest"
  #   env:
  #     PACKAGE: "pnr/openroad"
  #     OS_NAME: "osx"
  #     EXTRA_BUILD_ARGS: "--no-test"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./ci

  # icarus-osx:
  #   runs-on: "macos-latest"
  #   env:
  #     PACKAGE: "sim/icarus"
  #     OS_NAME: "osx"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./ci

  # verilator-osx:
  #   runs-on: "macos-latest"
  #   env:
  #     PACKAGE: "sim/verilator"
  #     OS_NAME: "osx"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./ci

  # yosys-osx:
  #   runs-on: "macos-latest"
  #   env:
  #     PACKAGE: "syn/yosys"
  #     OS_NAME: "osx"
  #     EXTRA_BUILD_ARGS: "--no-test"
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./ci

  # icarus-windows:
  #   runs-on: "windows-latest"
  #   env:
  #     PACKAGE: "sim/icarus"
  #     OS_NAME: "windows"
  #     SKIP: "true"  # See: https://github.com/hdl/conda-eda/issues/251
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./ci

  # yosys-windows:
  #   runs-on: "windows-latest"
  #   env:
  #     PACKAGE: "syn/yosys"
  #     OS_NAME: "windows"
  #     SKIP: "true"  # See: https://github.com/hdl/conda-eda/issues/224
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ./ci
