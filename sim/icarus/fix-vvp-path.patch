diff --git a/tgt-vvp/vvp.c b/tgt-vvp/vvp.c
index 600b1fe..353320d 100644
--- a/tgt-vvp/vvp.c
+++ b/tgt-vvp/vvp.c
@@ -63,7 +63,8 @@ __inline__ static void draw_execute_header(ivl_design_t des)
 	    const char *extra_args = ivl_design_flag(des, "VVP_EXTRA_ARGS");
 	    if (!extra_args)
 		  extra_args = "";
-	    fprintf(vvp_out, "#! %s%s\n", cp, extra_args);
+	    fprintf(vvp_out, "#! /usr/bin/env bash\n");
+	    fprintf(vvp_out, "exec %s -f \"$0\"%s \"$@\" <<'# EOF'\n", cp, extra_args);
 #if !defined(__MINGW32__)
 	    fchmod(fileno(vvp_out), 0755);
 #endif
@@ -239,6 +240,7 @@ int target_design(ivl_design_t des)
       for (idx = 0; idx < size; idx++) {
 	    fprintf(vvp_out, "    \"%s\";\n", ivl_file_table_item(idx));
       }
+      fprintf(vvp_out, "# EOF\n");
 
       fclose(vvp_out);
       EOC_cleanup_drivers();
diff --git a/vvp/config.h.in b/vvp/config.h.in
index d3dc260..95966b1 100644
--- a/vvp/config.h.in
+++ b/vvp/config.h.in
@@ -201,6 +201,7 @@ inline int64_t i64round(double x)
 #ifdef __MINGW32__
 # include  <cstdlib>
 # include  <string.h>
+# include  <stdlib.h>
 static inline char*strndup(const char*s, size_t n)
 {
       if (strlen(s) < n) return strdup(s);
diff --git a/vvp/lexor.lex b/vvp/lexor.lex
index 83f07d1..4ec6174 100644
--- a/vvp/lexor.lex
+++ b/vvp/lexor.lex
@@ -317,6 +317,7 @@ static char* strdupnew(char const *str)
      special, though, in that it is also a statement terminator. */
 ";".* { return ';'; }
 "#".* { ; }
+"exec ".* { ; }
 
 [ \t\b\r] { ; }
 
diff --git a/vvp/lib_main.cc b/vvp/lib_main.cc
index 2e433c9..fce8ed8 100644
--- a/vvp/lib_main.cc
+++ b/vvp/lib_main.cc
@@ -336,7 +336,7 @@ void vvp_init(const char *logfile_name, int argc, char*argv[])
       compile_init();
 }
 
-int vvp_run(const char *design_path)
+int vvp_run(FILE *designfile, const char *design_path)
 {
       struct rusage cycles[3];
       int ret_cd;
@@ -351,7 +351,7 @@ int vvp_run(const char *design_path)
       }
       ++vvp_used;
 
-      ret_cd = compile_design(design_path);
+      ret_cd = compile_design(designfile, design_path);
       destroy_lexor();
       print_vpi_call_errors();
       if (ret_cd) return ret_cd;
diff --git a/vvp/libvvp.h b/vvp/libvvp.h
index 2ea913c..c3f1026 100644
--- a/vvp/libvvp.h
+++ b/vvp/libvvp.h
@@ -12,6 +12,8 @@ extern "C" {
 #endif
 
 #include <stdbool.h>
+#include  <cstdio>
+#include  <cstdlib>
 
 /* vvp_set_stop_is_finish(true, 0) is equivalent to vvp's "-n" option.
  * vvp_set_stop_is_finish(true, 1) is equivalent to vvp's "-N" option.
@@ -59,7 +61,7 @@ extern void vvp_init(const char *logfile_name, int argc, char*argv[]);
  * compiled Verilog code.
  */
 
-extern int vvp_run(const char *design_path);
+  extern int vvp_run(FILE *designfile, const char *design_path);
 
 /* vpip_load_module(module_name) may be called after vvp_init() and before
  * vvp_run() to load and initialise a VPI module. It is equivalent to
diff --git a/vvp/main.cc b/vvp/main.cc
index 604b264..53fbf87 100644
--- a/vvp/main.cc
+++ b/vvp/main.cc
@@ -52,8 +52,11 @@ int main(int argc, char*argv[])
       int opt;
       unsigned flag_errors = 0;
       const char *logfile_name = 0x0;
+      const char *stdin_name = 0x0;
+      FILE *designfile = 0x0;
+      const char *design_path = 0x0;
 
-      while ((opt = getopt(argc, argv, "+hil:M:m:nNqsvV")) != EOF) switch (opt) {
+      while ((opt = getopt(argc, argv, "+hil:M:m:nNqsf:vV")) != EOF) switch (opt) {
          case 'h':
            fprintf(stderr,
                    "Usage: vvp [options] input-file [+plusargs...]\n"
@@ -69,6 +72,7 @@ int main(int argc, char*argv[])
 		   " -q             Quiet mode (suppress output on MCD bit 0).\n"
 		   " -s             $stop right away.\n"
                    " -v             Verbose progress messages.\n"
+                   " -f filename    Name of file on stdin (for better error messages).\n"
                    " -V             Print the version information.\n" );
            exit(0);
 	  case 'i':
@@ -105,6 +109,9 @@ int main(int argc, char*argv[])
 	  case 'V':
 	    version_flag = true;
 	    break;
+	  case 'f':
+	    stdin_name = optarg;
+	    break;
 	  default:
 	    flag_errors += 1;
       }
diff --git a/vvp/parse.y b/vvp/parse.y
index 63add91..316dc96 100644
--- a/vvp/parse.y
+++ b/vvp/parse.y
@@ -1250,16 +1250,11 @@ delay
 
 %%
 
-int compile_design(const char*path)
+int compile_design(FILE*file, const char*path)
 {
       yypath = path;
       yyline = 1;
-      yyin = fopen(path, "r");
-      if (yyin == 0) {
-	    fprintf(stderr, "%s: Unable to open input file.\n", path);
-	    return -1;
-      }
-
+      yyin = file;
       int rc = yyparse();
       fclose(yyin);
       return rc;
diff --git a/vvp/parse_misc.h b/vvp/parse_misc.h
index a63cfd1..08d2159 100644
--- a/vvp/parse_misc.h
+++ b/vvp/parse_misc.h
@@ -25,7 +25,7 @@
  * This method is called to compile the design file. The input is read
  * and a list of statements is created.
  */
-extern int compile_design(const char*path);
+extern int compile_design(FILE* file, const char*path);
 
 /*
  * This routine is called to check that the input file has a compatible
